pre_src_prepare() {
    [[ ${EAPI:-0} == [012345] ]] || return
    if ! type estack_push > /dev/null 2>&1; then
        local estack_names="eshopts_push eshopts_pop evar_push evar_push_set evar_pop estack_push estack_pop"
        source <(awk "/^# @(FUNCTION|VARIABLE): / { p = 0 } /^# @(FUNCTION|VARIABLE): (${estack_names// /|})\$/ { p = 1 } p { print }" ${PORTDIR}/eclass/estack.eclass)
    fi
    if ! type epatch_user > /dev/null 2>&1; then
        local epatch_names="EPATCH_SOURCE EPATCH_USER_SOURCE epatch_user_death_notice epatch_user epatch"
        source <(awk "/^# @(FUNCTION|VARIABLE): / { p = 0 } /^# @(FUNCTION|VARIABLE): (${epatch_names// /|})\$/ { p = 1 } p { print }" ${PORTDIR}/eclass/epatch.eclass)
    fi

    epatch_user

    for name in $epatch_names; do
        unset $name
    done
    for name in $estack_names; do
        unset $name
    done
}

post_src_prepare() {
	build_dir=abi_x86_64.${ABI}
	local CT=${1:-${CHOST}}
	case ${CT%%*-} in
		x86_64*)      build_dir=abi_x86_64.${ABI};;
		i?86*)        build_dir=abi_x86_32.${ABI};;
		*)            build_dir=${CTARGET};;
	esac

	if [ -e waf ] ; then
		./waf --help > /dev/null
		if [ -e ${S}-${build_dir} ] ; then
			cp -pR .waf-*/* ${S}-${build_dir}
			cp -pR .waf*-*/* ${S}-${build_dir}
		fi
		mv .waf-*/* . 2>/dev/null
		mv .waf*-*/* . 2>/dev/null
		sed -i '/^#==>$/,$d' waf
		if [ -e ${S}-${build_dir} ] ; then
			cp -p waf ${S}-${build_dir}
		fi
		rm -rf .waf-*
		rm -rf .waf*-*
		find waf* -name "*.pyc" -delete
		#rm -f waf
	fi
}
